# -*- coding: utf-8 -*-
"""Customer_segmentation_Ankush_Raj.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1iD9d7KL1PckfteF5NyH7YsjMglyC47z8

# **Customer Segmentaion**

*   Customer Segmentation is the subdivision of a market into discrete customer groups that share similar characteristics. Customer Segmentation can be a powerful means to identify unsatisfied customer needs. Using the above data companies can then outperform the competition by developing uniquely appealing products and services.

*   In this project, the idea was to identify segments of customers to target the potential user base using k-means clustering.

* The dataset has total of 5 features and 200 entries.

*   The dataset includes the following features:

  1. Customer ID

  2. Customer Gender

  3. Customer Age

  4. Annual Income of the customer (in Thousand Dollars)

  5. Spending score of the customer (based on customer behaviour and spending nature)

# **Code part:**

**Importing the necessary libraries**
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np, pandas as pd, matplotlib.pyplot as plt, seaborn as sns
import matplotlib
from sklearn.cluster import KMeans
# %matplotlib inline
import warnings
warnings.filterwarnings('ignore')

print("numpy: ",np.__version__)
print("pandas: ",pd.__version__)
print("matplotlib.pyplot: ",matplotlib.__version__)
print("seaborn: ",sns.__version__)

pip show scikit-learn

"""**Reading the excel file and analyzing the data**"""

df = pd.read_csv('/content/drive/MyDrive/customer-segmentation-dataset/Mall_Customers.csv')
df.head()

# Creating a copy of the dataset

df_copy = df.copy()
df_copy.head()

df_copy.shape

# Dropping the CustomerID column as that does not seem relevant to the context.

df_copy.drop(['CustomerID'], axis = 1, inplace = True)
df_copy.shape

df_copy.info()

## Checking for null values, if any

df_copy.isnull().sum()

df_copy.describe()

# Creating a list of those columns which has numerical data

numerical_col = [x for x in df_copy.columns if df_copy[x].dtypes != 'O']
numerical_col

# Creating a list of those columns which has categorical data

categorical_col = [x for x in df_copy.columns if df_copy[x].dtypes == 'O']
categorical_col

"""Plotting curves to analyze the distribution of Age, Annual Income and Spending Score over the entire data."""

plt.figure(figsize = (20,5))
n = 1
for col in numerical_col:
  plt.subplot(1,3,n)
  sns.distplot(df_copy[col], bins = 10)
  plt.subplots_adjust(hspace = -0.5, wspace = 0.5)
  n += 1

"""Distribution of male and female population in the dataset."""

plt.figure(figsize=(5,4))
df_copy['Gender'].value_counts().plot(kind = 'bar', color = ['green', 'orange'])

"""From the above plot we can see that the female population overweighs the male counterpart and thus, we can conclude that the shop/mall has higher female visit than that of male.

Now, using box plot to better visualize the distribution range of different numerical data.
"""

plt.figure(figsize = (10,5))
n = 1
c = ['red','orange','cyan']
for col in numerical_col:
  plt.subplot(1,3,n)
  sns.boxplot(data = df_copy[col], orient = 'v', color = c[n-1])
  plt.subplots_adjust(hspace = -0.5, wspace = 0.5)
  plt.xlabel(col)
  n +=1

plt.show()

"""Violin plot to visualize the distribution of gender over different features."""

plt.figure(figsize = (12,5))
n = 1
for col in numerical_col:
  plt.subplot(1,3,n)
  sns.set(style = 'whitegrid')
  plt.subplots_adjust(hspace = -1, wspace = 1)
  sns.violinplot(x = col, y = 'Gender', data = df_copy)
  plt.ylabel('Gender')
  n += 1
plt.show()

"""Now, we are visualizing the distribution of male population in different age groups."""

age18_25 = df_copy[(df_copy.Age <= 25) & (df_copy.Age >= 18) & (df_copy.Gender == 'Male')]
age26_35 = df_copy[(df_copy.Age <= 35) & (df_copy.Age >= 26) & (df_copy.Gender == 'Male')]
age36_45 = df_copy[(df_copy.Age <= 45) & (df_copy.Age >= 36) & (df_copy.Gender == 'Male')]
age46_55 = df_copy[(df_copy.Age <= 55) & (df_copy.Age >= 46) & (df_copy.Gender == 'Male')]
age55above = df_copy[(df_copy.Age >= 56) & (df_copy.Gender == 'Male')]

x = ["18-25","26-35","36-45","46-55","55+"]
y = [len(age18_25),len(age26_35),len(age36_45),len(age46_55),len(age55above)]

plt.figure(figsize=(10,4))
sns.barplot(x=x, y=y, palette="rocket")
plt.title("Number of Male Customers and Ages")
plt.xlabel("Age")
plt.ylabel("Number of Male Customers")
plt.show()

"""From the above plot, we can clearly see that the 26-35 age group has the highest number of male population among other age groups.

In a similar manner for female population.
"""

age18_25 = df_copy[(df_copy.Age <= 25) & (df_copy.Age >= 18) & (df_copy.Gender == 'Female')]
age26_35 = df_copy[(df_copy.Age <= 35) & (df_copy.Age >= 26) & (df_copy.Gender == 'Female')]
age36_45 = df_copy[(df_copy.Age <= 45) & (df_copy.Age >= 36) & (df_copy.Gender == 'Female')]
age46_55 = df_copy[(df_copy.Age <= 55) & (df_copy.Age >= 46) & (df_copy.Gender == 'Female')]
age55above = df_copy[(df_copy.Age >= 56) & (df_copy.Gender == 'Female')]

x = ["18-25","26-35","36-45","46-55","55+"]
y = [len(age18_25),len(age26_35),len(age36_45),len(age46_55),len(age55above)]

plt.figure(figsize=(10,4))
sns.barplot(x=x, y=y, palette="rocket")
plt.title("Number of Female Customers and Ages")
plt.xlabel("Age")
plt.ylabel("Number of Female Customers")
plt.show()

"""From the above plot, we can clearly see that the 26-35 age group has the highest number of female population in comparison to other age groups.

Violing plot to understand the distribution of age over the population.
"""

plt.figure(figsize=(4,4))
plt.title("Ages Frequency")
sns.axes_style("dark")
sns.violinplot(y=df["Age"])
plt.show()

"""The above violing plot states that our majority population lies in 30-40 age group as it has the highest density.

Now, dividing the population in different age groups to better understand the distribution.
"""

age18_25 = df_copy.Age[(df_copy.Age <= 25) & (df_copy.Age >= 18)]
age26_35 = df_copy.Age[(df_copy.Age <= 35) & (df_copy.Age >= 26)]
age36_45 = df_copy.Age[(df_copy.Age <= 45) & (df_copy.Age >= 36)]
age46_55 = df_copy.Age[(df_copy.Age <= 55) & (df_copy.Age >= 46)]
age55above = df_copy.Age[df_copy.Age >= 56]

x = ["18-25","26-35","36-45","46-55","55+"]
y = [len(age18_25.values),len(age26_35.values),len(age36_45.values),len(age46_55.values),len(age55above.values)]

plt.figure(figsize=(10,4))
sns.barplot(x=x, y=y, palette="rocket")
plt.title("Number of Customer and Ages")
plt.xlabel("Age")
plt.ylabel("Number of Customer")
plt.show()

"""Analyzing the speding score over the different age groups."""

ss1_20 = df_copy["Spending Score (1-100)"][(df_copy["Spending Score (1-100)"] >= 1) & (df_copy["Spending Score (1-100)"] <= 20)]
ss21_40 = df_copy["Spending Score (1-100)"][(df_copy["Spending Score (1-100)"] >= 21) & (df_copy["Spending Score (1-100)"] <= 40)]
ss41_60 = df_copy["Spending Score (1-100)"][(df_copy["Spending Score (1-100)"] >= 41) & (df_copy["Spending Score (1-100)"] <= 60)]
ss61_80 = df_copy["Spending Score (1-100)"][(df_copy["Spending Score (1-100)"] >= 61) & (df_copy["Spending Score (1-100)"] <= 80)]
ss81_100 = df_copy["Spending Score (1-100)"][(df_copy["Spending Score (1-100)"] >= 81) & (df_copy["Spending Score (1-100)"] <= 100)]

ssx = ["1-20", "21-40", "41-60", "61-80", "81-100"]
ssy = [len(ss1_20.values), len(ss21_40.values), len(ss41_60.values), len(ss61_80.values), len(ss81_100.values)]

plt.figure(figsize=(6,4))
sns.barplot(x=ssx, y=ssy, palette="nipy_spectral_r")
plt.title("Spending Scores")
plt.xlabel("Score")
plt.ylabel("Number of Customer Having the Score")
plt.show()

"""Thus, 41-60 age group population has the highest spending score.

Analyzing the annual income over the different age groups.
"""

ai0_30 = df_copy["Annual Income (k$)"][(df_copy["Annual Income (k$)"] >= 0) & (df_copy["Annual Income (k$)"] <= 30)]
ai31_60 = df_copy["Annual Income (k$)"][(df_copy["Annual Income (k$)"] >= 31) & (df_copy["Annual Income (k$)"] <= 60)]
ai61_90 = df_copy["Annual Income (k$)"][(df_copy["Annual Income (k$)"] >= 61) & (df_copy["Annual Income (k$)"] <= 90)]
ai91_120 = df_copy["Annual Income (k$)"][(df_copy["Annual Income (k$)"] >= 91) & (df_copy["Annual Income (k$)"] <= 120)]
ai121_150 = df_copy["Annual Income (k$)"][(df_copy["Annual Income (k$)"] >= 121) & (df_copy["Annual Income (k$)"] <= 150)]

aix = ["$ 0 - 30,000", "$ 30,001 - 60,000", "$ 60,001 - 90,000", "$ 90,001 - 120,000", "$ 120,001 - 150,000"]
aiy = [len(ai0_30.values), len(ai31_60.values), len(ai61_90.values), len(ai91_120.values), len(ai121_150.values)]

plt.figure(figsize=(12,4))
sns.barplot(x=aix, y=aiy, palette="Set2")
plt.title("Annual Incomes")
plt.xlabel("Income")
plt.ylabel("Number of Customer")
plt.show()

"""The above bar plot give insight that the majority customer has the income of 60,001-90,000 dollars.

Now, we are ananlyzing the correlation among different numerical variables using heatmap.
"""

df_copy.corr()

sns.heatmap(df_copy.corr(), annot = True, cmap = 'viridis')

"""From the above heatmap, we can say that the features age and spending score has the highest correlation (negatively correlated). Thus, individuals with higher age has the lower spending score and vice-versa.

# **K-Means Clustering**

Clustering based on 2 features. First, we work with two features only, age and annual income.
"""

from sklearn.cluster import KMeans
wcss = []
for k in range(1,11):
    kmeans = KMeans(n_clusters=k, init="k-means++")
    kmeans.fit(df_copy.iloc[:,[1,2]])
    wcss.append(kmeans.inertia_)
plt.figure(figsize=(6,5))
plt.plot(range(1,11),wcss, linewidth=2, color="red", marker ="8")
plt.xlabel("K Value")
plt.xticks(np.arange(1,11,1))
plt.ylabel("WCSS")
plt.show()

"""By using elbow method, we tried to find the optimum number of cluster. From the above, graph we choose the number of clusters as 5."""

kmeans = KMeans(n_clusters = 5)
labels = kmeans.fit_predict(df_copy.iloc[:,[1,2]])

print(labels)

kmeans.cluster_centers_

"""Plotting the different data points."""

plt.figure(figsize = (5,5))
plt.scatter(df_copy['Age'], df_copy['Annual Income (k$)'], c= kmeans.labels_, cmap = 'rainbow')
plt.scatter(kmeans.cluster_centers_[:,0], kmeans.cluster_centers_[:,1], color = 'black', s = 60)
plt.xlabel('Age')
plt.ylabel('Annual Income (k$)')
plt.title('Clusters of customers')
plt.show()

"""Similarly for other two features annual income and spending score."""

from sklearn.cluster import KMeans
wcss = []
for k in range(1,11):
    kmeans = KMeans(n_clusters=k, init="k-means++")
    kmeans.fit(df_copy.iloc[:,[2,3]])
    wcss.append(kmeans.inertia_)
plt.figure(figsize=(6,5))
plt.plot(range(1,11),wcss, linewidth=2, color="red", marker ="8")
plt.xlabel("K Value")
plt.xticks(np.arange(1,11,1))
plt.ylabel("WCSS")
plt.show()

kmeans = KMeans(n_clusters = 5)
labels = kmeans.fit_predict(df_copy.iloc[:,[2,3]])

print(labels)

kmeans.cluster_centers_

plt.figure(figsize = (5,5))
plt.scatter(df_copy['Annual Income (k$)'], df_copy['Spending Score (1-100)'], c = kmeans.labels_, cmap = 'rainbow')
plt.scatter(kmeans.cluster_centers_[:,0], kmeans.cluster_centers_[:,1], c = 'black', s = 60)
plt.xlabel('Annual Income (k$)')
plt.ylabel('Spending Score (1-100)')
plt.title('Clusters of customers')
plt.show()

"""Now, for the remaining two features namely, Age and Spending score."""

from sklearn.cluster import KMeans
wcss = []
for k in range(1,11):
    kmeans = KMeans(n_clusters=k, init="k-means++")
    kmeans.fit(df_copy.iloc[:,[1,3]])
    wcss.append(kmeans.inertia_)
plt.figure(figsize=(6,5))
plt.plot(range(1,11),wcss, linewidth=2, color="red", marker ="8")
plt.xlabel("K Value")
plt.xticks(np.arange(1,11,1))
plt.ylabel("WCSS")
plt.show()

kmeans = KMeans(n_clusters = 5)
labels = kmeans.fit_predict(df_copy.iloc[:,[1,3]])

print(labels)

kmeans.cluster_centers_

plt.figure(figsize = (5,5))
plt.scatter(df_copy['Age'], df_copy['Spending Score (1-100)'], c = kmeans.labels_, cmap = 'rainbow')
plt.scatter(kmeans.cluster_centers_[:,0], kmeans.cluster_centers_[:,1], c = 'black', s = 60)
plt.xlabel('Age')
plt.ylabel('Spending Score (1-100)')
plt.title('Clusters of customers')
plt.show()

"""Now, we shall be working on 3 types of data. Apart from the spending score and annual income of customers, we shall also take in the age of the customers."""

from sklearn.cluster import KMeans
wcss = []
for k in range(1,11):
    kmeans = KMeans(n_clusters=k, init="k-means++")
    kmeans.fit(df_copy.iloc[:,1:])
    wcss.append(kmeans.inertia_)
plt.figure(figsize=(6,5))
plt.plot(range(1,11),wcss, linewidth=2, color="red", marker ="8")
plt.xlabel("K Value")
plt.xticks(np.arange(1,11,1))
plt.ylabel("WCSS")
plt.show()

kmeans = KMeans(n_clusters = 5)
labels = kmeans.fit_predict(df_copy.iloc[:,1:])

print(labels)

print(kmeans.cluster_centers_)

df.head()

df_copy['label'] = kmeans.fit_predict(df_copy.iloc[:,1:])

from mpl_toolkits.mplot3d import Axes3D
fig = plt.figure(figsize=(8,8))
ax = fig.add_subplot(111, projection='3d')
ax.scatter(df_copy.Age[df_copy.label == 0], df_copy["Annual Income (k$)"][df_copy.label == 0], df_copy["Spending Score (1-100)"][df_copy.label == 0], c='blue', s=60)
ax.scatter(df_copy.Age[df_copy.label == 1], df_copy["Annual Income (k$)"][df_copy.label == 1], df_copy["Spending Score (1-100)"][df_copy.label == 1], c='red', s=60)
ax.scatter(df_copy.Age[df_copy.label == 2], df_copy["Annual Income (k$)"][df_copy.label == 2], df_copy["Spending Score (1-100)"][df_copy.label == 2], c='green', s=60)
ax.scatter(df_copy.Age[df_copy.label == 3], df_copy["Annual Income (k$)"][df_copy.label == 3], df_copy["Spending Score (1-100)"][df_copy.label == 3], c='orange', s=60)
ax.scatter(df_copy.Age[df_copy.label == 4], df_copy["Annual Income (k$)"][df_copy.label == 4], df_copy["Spending Score (1-100)"][df_copy.label == 4], c='purple', s=60)
ax.view_init(30, 185)
plt.xlabel("Age")
plt.ylabel("Annual Income (k$)")
ax.set_zlabel('Spending Score (1-100)')
plt.show()

"""Now, we got a 3D plot and if we want to know the Customer IDs, we can do that too."""

# Adding the CustomerID column again to the dataframe.

df_copy['CustomerID'] = df['CustomerID']
df_copy = df_copy.iloc[:, [5,0,1,2,3,4]]

df_copy.head()

# Making seperate dataframe for the different labels of customers

cst1 = df_copy[df_copy.label == 0]
cst2 = df_copy[df_copy.label == 1]
cst3 = df_copy[df_copy.label == 2]
cst4 = df_copy[df_copy.label == 3]
cst5 = df_copy[df_copy.label == 4]

cst1.head()

# Now, printing the list of Customer IDs of different labels and their respective frequency.

print('Number of customer in 1st group =', len(cst1))
print('They are -', cst1["CustomerID"].values)
print("--------------------------------------------------------------------------------------------")
print('Number of customer in 2nd group =', len(cst2))
print('They are -', cst2["CustomerID"].values)
print("--------------------------------------------------------------------------------------------")
print('Number of customer in 3rd group =', len(cst3))
print('They are -', cst3["CustomerID"].values)
print("--------------------------------------------------------------------------------------------")
print('Number of customer in 4th group =', len(cst4))
print('They are -', cst4["CustomerID"].values)
print("--------------------------------------------------------------------------------------------")
print('Number of customer in 5th group =', len(cst5))
print('They are -', cst5["CustomerID"].values)
print("--------------------------------------------------------------------------------------------")

"""From the above list of customers we can say that 2nd group of customers have the highest density. So, this is how we used K-Means clustering algorithm to understand customer data. K-Means is a good clustering algorithm for unsupervised learning. It is also easy to use, fast and efficient in terms of computational cost."""